| package |
package := Package name: 'Buoy-Collections'.
package paxVersion: 1;
	basicComment: 'Willow for Dolphin Smalltalk 7.1

Willow is a Web Interaction Library that eases the burden of creating AJAX-based web applications.

Willow and associated frameworks created by Buenos Aires Smalltalk
https://github.com/ba-st

Dolphin Smalltalk port by John Aspinall, June 2019.'.


package classNames
	add: #BalancedDistributionInBucketsAlgorithm;
	add: #BinarySearchAlgorithm;
	add: #CircularIterator;
	add: #CollectionFormatter;
	yourself.

package methodNames
	add: #Collection -> #maxUsing:;
	add: #Collection -> #maxUsing:ifEmpty:;
	add: #Collection -> #minUsing:;
	add: #Collection -> #minUsing:ifEmpty:;
	add: #SequenceableCollection -> #copyFirst:;
	add: #SequenceableCollection -> #copyLast:;
	add: #SequenceableCollection -> #copyNoMoreThanFirst:;
	add: #SequenceableCollection -> #copyNoMoreThanLast:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'Buoy-Assertions'
	'Buoy-Dynamic-Binding'
	'..\Core\Object Arts\Dolphin\Base\Dolphin').

package!

"Class Definitions"!

Object subclass: #BalancedDistributionInBucketsAlgorithm
	instanceVariableNames: 'collection maximumBucketSize'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #BinarySearchAlgorithm
	instanceVariableNames: 'start stop searchKeyBlock collection searchKey'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #CircularIterator
	instanceVariableNames: 'options currentIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #CollectionFormatter
	instanceVariableNames: 'separator elementFormatter lastSeparatorOptional'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Collection methodsFor!

maxUsing: aBlock	^ self maxUsing: aBlock ifEmpty: [ self errorEmptyCollection ]!

maxUsing: aBlock ifEmpty: ifEmptyBlock	^ self ifEmpty: ifEmptyBlock ifNotEmpty: [ self inject: ( aBlock value: self anyOne ) into: [ :max :each | max max: ( aBlock value: each ) ] ]!

minUsing: aBlock	^ self minUsing: aBlock ifEmpty: [ self errorEmptyCollection ]!

minUsing: aBlock ifEmpty: ifEmptyBlock	^ self ifEmpty: ifEmptyBlock ifNotEmpty: [ self inject: ( aBlock value: self anyOne ) into: [ :max :each | max min: ( aBlock value: each ) ] ]! !
!Collection categoriesFor: #maxUsing:!*Buoy/Collections!public! !
!Collection categoriesFor: #maxUsing:ifEmpty:!*Buoy/Collections!public! !
!Collection categoriesFor: #minUsing:!*Buoy/Collections!public! !
!Collection categoriesFor: #minUsing:ifEmpty:!*Buoy/Collections!public! !

!SequenceableCollection methodsFor!

copyFirst: n	^ [ self copyFrom: 1 to: n ] unless: n = 0 inWhichCase: [ self species new ]!

copyLast: n	^ [ self copyFrom: self size - n + 1 to: self size ] unless: n = 0 inWhichCase: [ self species new ]!

copyNoMoreThanFirst: n	^ self copyFirst: ( self size min: n )!

copyNoMoreThanLast: n	^ self copyLast: ( n min: self size )! !
!SequenceableCollection categoriesFor: #copyFirst:!*Buoy/Collections!public! !
!SequenceableCollection categoriesFor: #copyLast:!*Buoy/Collections!public! !
!SequenceableCollection categoriesFor: #copyNoMoreThanFirst:!*Buoy/Collections!public! !
!SequenceableCollection categoriesFor: #copyNoMoreThanLast:!*Buoy/Collections!public! !

"End of package definition"!

