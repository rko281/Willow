| package |
package := Package name: 'Boardwalk-Tests'.
package paxVersion: 1;
	basicComment: 'Willow for Dolphin Smalltalk 7.1

Willow is a Web Interaction Library that eases the burden of creating AJAX-based web applications.

Willow and associated frameworks created by Buenos Aires Smalltalk
https://github.com/ba-st

Dolphin Smalltalk port by John Aspinall, September 2018.'.


package classNames
	add: #BoardwalkJavascriptTest;
	add: #HTMLAsserterTest;
	add: #IdentifierAssignerTest;
	add: #JSFunctionCallTest;
	add: #JSNamedFunctionTest;
	add: #WAApplicationDeployedTest;
	add: #WAApplicationInDevelopmentTest;
	add: #WABoardwalkExtensionsTest;
	add: #WADeploymentAwareFileHandlerTest;
	add: #WADeploymentAwareFileMetadataLibraryTest;
	add: #WAFileTestingPlatform;
	add: #WAFileTestingPlatformTest;
	add: #WAOnlineLibraryTest;
	add: #WATestingFileMetadataDeploymentLibrary;
	add: #WATestingFileMetadataDevelopmentLibrary;
	add: #WATestingFileMetadataLibrary;
	add: #WATestingOnlineLibrary;
	add: #WATestingRootComponent;
	yourself.

package methodNames
	add: #WARenderingTest -> #assertFileDeploymentOf:createsAsFolders:andFileContentsMatching:;
	add: #WARenderingTest -> #builder;
	add: #WARenderingTest -> #createCodec;
	add: #WARenderingTest -> #fullDocumentRendering:;
	add: #WARenderingTest -> #render:;
	add: #WARenderingTest -> #renderUsing:;
	add: #WARenderingTest -> #useFileTestingPlatformDuring:;
	add: 'WARenderingTest class' -> #isAbstract;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: 'Boardwalk';
	add: 'Buoy-Assertions';
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Grease\Grease-Core';
	add: '..\Seaside\Javascript\Javascript-Core';
	add: '..\Seaside\Javascript\Javascript-Tests-Core';
	add: '..\Portishead\Portishead-Pragmas';
	add: '..\Portishead\Portishead-SUnit';
	add: '..\Seaside\Seaside\Seaside-Canvas';
	add: '..\Seaside\Seaside\Seaside-Core';
	add: '..\Seaside\Seaside\Seaside-Tests-Canvas';
	add: '..\Seaside\Seaside\Seaside-Tools-Core';
	add: '..\Core\Contributions\Camp Smalltalk\SUnit\SUnit';
	yourself).

package setManualPrerequisites: #(
	'Portishead-SUnit').

package!

"Class Definitions"!

GRPlatform subclass: #WAFileTestingPlatform
	instanceVariableNames: 'platform createdFolders createdFiles hashByFile'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WADeploymentAwareFileMetadataLibrary subclass: #WATestingFileMetadataLibrary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WATestingFileMetadataLibrary subclass: #WATestingFileMetadataDeploymentLibrary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WATestingFileMetadataLibrary subclass: #WATestingFileMetadataDevelopmentLibrary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WAOnlineLibrary subclass: #WATestingOnlineLibrary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WAPainter subclass: #WATestingRootComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #HTMLAsserterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #IdentifierAssignerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #WAApplicationDeployedTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #WAApplicationInDevelopmentTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #WADeploymentAwareFileHandlerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JSObjectTest subclass: #BoardwalkJavascriptTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JSObjectTest subclass: #JSFunctionCallTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JSObjectTest subclass: #JSNamedFunctionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WARenderingTest subclass: #WABoardwalkExtensionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WARenderingTest subclass: #WADeploymentAwareFileMetadataLibraryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WARenderingTest subclass: #WAFileTestingPlatformTest
	instanceVariableNames: 'testingPlatform'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WARenderingTest subclass: #WAOnlineLibraryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!WARenderingTest methodsFor!

assertFileDeploymentOf: fileMetadataLibrary createsAsFolders: expectedFolders andFileContentsMatching: expectedFilesMetadata

	"expectedFilesMetadata MUST be a collection of associations with key = expectedFilePath and value = expectedFileContentsHash"

	self
		useFileTestingPlatformDuring: [ | expectedFiles hashByFile |

			fileMetadataLibrary deployFiles.
			expectedFiles := expectedFilesMetadata asArray collect: [ :fileMetadata | fileMetadata key ].
			hashByFile := expectedFilesMetadata asDictionary.

			"Dolphin-specific mods - 
			1) sort before comparing to take account of ordering differences between Pharo and Smalltalk 
			2) we record a nil hash if we can't compute a pharo-compatible hash value"
			self
				assert: GRPlatform current createdFolders asSortedCollection asArray equals: expectedFolders asSortedCollection asArray ;
				assert: GRPlatform current createdFiles asSortedCollection asArray equals: expectedFiles asSortedCollection asArray .
			hashByFile keysAndValuesDo: [ :file :hash | (GRPlatform current savedHashFor: file) ifNotNil: [ :savedHash | self assert: savedHash equals: hash ]] ]!

builder

	^ WAHtmlCanvas builder
		fullDocument: false;
		codec: self createCodec;
		yourself!

createCodec

	^ GRCodec forEncoding: 'utf8'!

fullDocumentRendering: aWARootComponent

	^ self builder
		fullDocument: true;
		rootBlock: [ :root | aWARootComponent updateRoot: root ];
		render: aWARootComponent!

render: aRenderable

	^ self renderUsing: [ :canvas | canvas render: aRenderable ]!

renderUsing: aMonadycBlock

	^ self builder render: [ :canvas | aMonadycBlock cull: canvas ]!

useFileTestingPlatformDuring: aBlock

	| installedPlatform |

	installedPlatform := GRPlatform current.
	[ GRPlatform current: (WAFileTestingPlatform wrapping: installedPlatform).
	aBlock value ]
		ensure: [ GRPlatform current: installedPlatform ]! !
!WARenderingTest categoriesFor: #assertFileDeploymentOf:createsAsFolders:andFileContentsMatching:!asserting!public! !
!WARenderingTest categoriesFor: #builder!public!utility! !
!WARenderingTest categoriesFor: #createCodec!public! !
!WARenderingTest categoriesFor: #fullDocumentRendering:!public!utility! !
!WARenderingTest categoriesFor: #render:!public!utility! !
!WARenderingTest categoriesFor: #renderUsing:!public!utility! !
!WARenderingTest categoriesFor: #useFileTestingPlatformDuring:!public!utility! !

!WARenderingTest class methodsFor!

isAbstract
	"Override to true if a TestCase subclass is Abstract and should not have
	TestCase instances built from it"

	^self name = #WARenderingTest! !
!WARenderingTest class categoriesFor: #isAbstract!public!testing! !

"End of package definition"!

