"Filed out from Dolphin Smalltalk 7"!

BWRenderingTest subclass: #CombinedWebInteractionInterpreterTest
	instanceVariableNames: 'okButton cancelButton'
	classVariableNames: ''
	poolDictionaries: 'Willow'
	classInstanceVariableNames: ''!
CombinedWebInteractionInterpreterTest guid: (GUID fromString: '{f0a068db-38e2-45f5-ae96-3310badd7a39}')!
CombinedWebInteractionInterpreterTest comment: 'A CombinedWebInteractionInterpreterTest is a test class for testing the behavior of CombinedWebInteractionInterpreter'!
!CombinedWebInteractionInterpreterTest categoriesForClass!Willow-Tests-WebInteraction! !
!CombinedWebInteractionInterpreterTest methodsFor!

buttons	^ {okButton.	cancelButton}!

setUp	super setUp.	okButton := AsynchronicButtonWebView labeled: 'Ok'.	cancelButton := AsynchronicButtonWebView labeled: 'Cancel'!

testAddCssClass	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter addCssClass: Classification >> #willow.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals: '<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(this).addClass("willow")});$("#button-id2").click(function(event){$(this).addClass("willow")});</script>'!

testAddCssClassToComponentsMatching	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter addCssClass: Classification >> #willow toComponentsMatching: [ :canvas | canvas jQuery this ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(this).addClass("willow")});$("#button-id2").click(function(event){$(this).addClass("willow")});</script>'!

testChangeCssClassTo	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter changeCssClass: Classification >> #loading to: Classification >> #willow.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(".willow-loading").removeClass("willow-loading").addClass("willow")});$("#button-id2").click(function(event){$(".willow-loading").removeClass("willow-loading").addClass("willow")});</script>'!

testCloseAllDialogs	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter closeAllDialogs.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testCloseLastDialog	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter closeLastDialog.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testConfirmAsking	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter confirmAsking: 'Continue?'.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){if(confirm("Continue?")){Willow.callServer({"url":"/","data":"1"})}});$("#button-id4").click(function(event){if(confirm("Continue?")){Willow.callServer({"url":"/","data":"3"})}});</script>'!

testDetermineBehaviorByEvaluating	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter determineBehaviorByEvaluating: [  ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testDetermineBehaviorByEvaluatingWith	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter determineBehaviorByEvaluating: [  ] with: 'theClientParameter'.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id3" type="button">Ok</button><button id="button-id6" type="button">Cancel</button><script type="text/javascript">$("#button-id3").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["1","2="+encodeURIComponent(JSON.stringify("theClientParameter"))].join("&")})});$("#button-id6").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["4","5="+encodeURIComponent(JSON.stringify("theClientParameter"))].join("&")})});</script>'!

testDisable	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	html := self		renderUsing: [ :canvas | 			interpreter disable.			canvas				render: okButton;				render: cancelButton			].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(this).prop("disabled",true)});$("#button-id2").click(function(event){$(this).prop("disabled",true)});</script>'!

testDisableSpecificComponent	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			interpreter disable: textInput.			canvas				render: okButton;				render: cancelButton			].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$("#15").prop("disabled",true)});$("#button-id2").click(function(event){$("#15").prop("disabled",true)});</script>'!

testEnable	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			interpreter enable: textInput.			canvas				render: okButton;				render: cancelButton			].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$("#15").prop("disabled",false)});$("#button-id2").click(function(event){$("#15").prop("disabled",false)});</script>'!

testEvaluate	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter evaluate: [  ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testEvaluateWith	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter evaluate: [ :arguments | arguments ] with: #(firstThing secondStuff).	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id3" type="button">Ok</button><button id="button-id6" type="button">Cancel</button><script type="text/javascript">$("#button-id3").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["1","2="+encodeURIComponent(JSON.stringify(["firstThing","secondStuff"]))].join("&")})});$("#button-id6").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["4","5="+encodeURIComponent(JSON.stringify(["firstThing","secondStuff"]))].join("&")})});</script>'!

testExecuteOnClient	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter executeOnClient: [ (JSStream on: 'window') call: 'print' ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){window.print()});$("#button-id2").click(function(event){window.print()});</script>'!

testFocus	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			interpreter focus: textInput.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testFocusUsing	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter focusUsing: [ :canvas | canvas jQuery this ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testInform	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter inform: 'A message'.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){alert("A message")});$("#button-id2").click(function(event){alert("A message")});</script>'!

testInformSelection	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter informSelection.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){alert($(this).children("option:selected").text())});$("#button-id2").click(function(event){alert($(this).children("option:selected").text())});</script>'!

testOnlyWhenDetermineBehaviorByEvaluating	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter onlyWhen: '<1s> !!= null' determineBehaviorByEvaluating: [  ] with: 'theClientParameter'.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id3" type="button">Ok</button><button id="button-id6" type="button">Cancel</button><script type="text/javascript">$("#button-id3").click(function(event){if("theClientParameter" !!= null){Willow.callServer({"type":"POST","url":"/","data":["1","2="+encodeURIComponent(JSON.stringify("theClientParameter"))].join("&")})}});$("#button-id6").click(function(event){if("theClientParameter" !!= null){Willow.callServer({"type":"POST","url":"/","data":["4","5="+encodeURIComponent(JSON.stringify("theClientParameter"))].join("&")})}});</script>'!

testOpen	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter open: [ :canvas | canvas dialog attributeAt: 'open' put: true ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testRemove	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			interpreter remove: textInput.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testRemoveCssClassFromComponentsMatching	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter removeCssClass: Classification >> #loading fromComponentsMatching: [ :canvas | canvas jQuery this ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(this).removeClass("willow-loading")});$("#button-id2").click(function(event){$(this).removeClass("willow-loading")});</script>'!

testRemoveCssClassFromComponentsWithClass	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter removeCssClass: Classification >> #loading fromComponentsWithClass: Classification >> #willow.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(".willow").removeClass("willow-loading")});$("#button-id2").click(function(event){$(".willow").removeClass("willow-loading")});</script>'!

testRender	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			interpreter render: textInput.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testRenderAll	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			interpreter renderAll: {textInput}.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testScrollingIntoView	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	interpreter scrollingIntoView: id.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testSerializeChildForm	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter serializeChildForm.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["1",$(this).children("form").serialize()].join("&")})});$("#button-id4").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["3",$(this).children("form").serialize()].join("&")})});</script>'!

testSerializeContainerForm	| interpreter html |	interpreter := CombinedWebInteractionInterpreter		combiningInterpretersOf:			{okButton.			cancelButton}.	interpreter serializeContainerForm.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["1",$(this).closest("form").find(":input").serialize()].join("&")})});$("#button-id4").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["3",$(this).closest("form").find(":input").serialize()].join("&")})});</script>'!

testSerializeForm	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	html := self		renderUsing: [ :canvas | 			| form |			form := canvas form.			form id: 'id15'.			interpreter serializeForm: form.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<form accept-charset="utf-8" method="post" action="/" id="id15"></form><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["1",$("#id15").serialize()].join("&")})});$("#button-id4").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["3",$("#id15").serialize()].join("&")})});</script>'!

testSerializeIt	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter serializeIt.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["1",$(this).serialize()].join("&")})});$("#button-id4").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["3",$(this).serialize()].join("&")})});</script>'!

testSerializeWithHiddenInputs	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter serializeWithHiddenInputs.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["1",$(this).next("input:hidden").addBack().serialize()].join("&")})});$("#button-id4").click(function(event){Willow.callServer({"type":"POST","url":"/","data":["3",$(this).next("input:hidden").addBack().serialize()].join("&")})});</script>'!

testSetValueToThenTriggerChangeOf	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput id: id.			interpreter setValueTo: [ 'Ok' ] thenTriggerChangeOf: textInput.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testSetValueToWithoutTriggeringChangeOnComponentWithId	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	interpreter setValueTo: [ 'Ok' ] withoutTriggeringChangeOnComponentWithId: id.	html := self		renderUsing: [ :canvas | 			canvas textInput id: id.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testShowLoadingNotificationStyledAsAll	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter showLoadingNotificationStyledAsAll: #().	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){$("#willow-notification-section").html("<div>Loading...</div>");Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){$("#willow-notification-section").html("<div>Loading...</div>");Willow.callServer({"url":"/","data":"3"})});</script>'!

testShowWhileCallingServerToRender	| html interpreter container |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	container := IdentifiedWebView forDivNamed: 'search-results' containing: ''.	html := self		renderUsing: [ :canvas | 			interpreter show: 'Loading...' whileCallingServerToRender: container.			canvas				render: okButton;				render: cancelButton;				render: container ].	self		assert: html		equals:			'<button id="button-id3" type="button">Ok</button><button id="button-id5" type="button">Cancel</button><div id="search-results-id1"></div><script type="text/javascript">$("#button-id3").click(function(event){$("#search-results-id1").html("Loading...");Willow.callServer({"url":"/","data":"2"})});$("#button-id5").click(function(event){$("#search-results-id1").html("Loading...");Willow.callServer({"url":"/","data":"4"})});</script>'!

testSubmitForm	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| form |			form := canvas form.			form id: id.			interpreter submitForm: form.			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<form accept-charset="utf-8" method="post" action="/" id="15"></form><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testSubmitFormStyledAs	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter submitFormStyledAs: Classification >> #willow.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){Willow.callServer({"url":"/","data":"1"})});$("#button-id4").click(function(event){Willow.callServer({"url":"/","data":"3"})});</script>'!

testTemporarilyDisableAndTransformInto	| interpreter html id |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	id := '15'.	html := self		renderUsing: [ :canvas | 			| textInput |			textInput := canvas textInput.			textInput id: id.			interpreter temporarilyDisableAndTransform: textInput into: 'Loading...'.			canvas				render: okButton;				render: cancelButton			].	self		assert: html		equals:			'<input id="15" type="text"/><button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){var componentToDisable=$("#15");if(componentToDisable.attr("data-willow-events-disabled")!!=="disabled"){componentToDisable.attr("data-willow-events-disabled","disabled").addClass("willow-disabled-component").attr("data-original-html",componentToDisable.html()).attr("disabled",true).html("Loading...");Willow.callServer({"complete":function(){componentToDisable.removeAttr("data-willow-events-disabled").attr("disabled",false).removeClass("willow-disabled-component").html(componentToDisable.attr("data-original-html"))},"url":"/","data":"1"})}});$("#button-id4").click(function(event){var componentToDisable=$("#15");if(componentToDisable.attr("data-willow-events-disabled")!!=="disabled"){componentToDisable.attr("data-willow-events-disabled","disabled").addClass("willow-disabled-component").attr("data-original-html",componentToDisable.html()).attr("disabled",true).html("Loading...");Willow.callServer({"complete":function(){componentToDisable.removeAttr("data-willow-events-disabled").attr("disabled",false).removeClass("willow-disabled-component").html(componentToDisable.attr("data-original-html"))},"url":"/","data":"3"})}});</script>'!

testTemporarilyDisableAndTransformSelfInto	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	html := self		renderUsing: [ :canvas | 			interpreter temporarilyDisableAndTransformInto: 'Loading...'.			canvas				render: okButton;				render: cancelButton			].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id4" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){var componentToDisable=$(this);if(componentToDisable.attr("data-willow-events-disabled")!!=="disabled"){componentToDisable.attr("data-willow-events-disabled","disabled").addClass("willow-disabled-component").attr("data-original-html",componentToDisable.html()).attr("disabled",true).html("Loading...");Willow.callServer({"complete":function(){componentToDisable.removeAttr("data-willow-events-disabled").attr("disabled",false).removeClass("willow-disabled-component").html(componentToDisable.attr("data-original-html"))},"url":"/","data":"1"})}});$("#button-id4").click(function(event){var componentToDisable=$(this);if(componentToDisable.attr("data-willow-events-disabled")!!=="disabled"){componentToDisable.attr("data-willow-events-disabled","disabled").addClass("willow-disabled-component").attr("data-original-html",componentToDisable.html()).attr("disabled",true).html("Loading...");Willow.callServer({"complete":function(){componentToDisable.removeAttr("data-willow-events-disabled").attr("disabled",false).removeClass("willow-disabled-component").html(componentToDisable.attr("data-original-html"))},"url":"/","data":"3"})}});</script>'!

testToggleCssClass	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter toggleCssClass: Classification >> #loading.	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(this).toggleClass("willow-loading")});$("#button-id2").click(function(event){$(this).toggleClass("willow-loading")});</script>'!

testToggleCssClassOn	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter toggleCssClass: Classification >> #willow on: (IdentifiedWebView forDivNamed: 'example' containing: [  ]).	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id3" type="button">Cancel</button><script type="text/javascript">$("#button-id2").click(function(event){$("#example-id1").toggleClass("willow")});$("#button-id3").click(function(event){$("#example-id1").toggleClass("willow")});</script>'!

testToggleCssClassOnComponentsMatching	| interpreter html |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	interpreter toggleCssClass: Classification >> #loading onComponentsMatching: [ :canvas | canvas jQuery this ].	html := self		renderUsing: [ :canvas | 			canvas				render: okButton;				render: cancelButton ].	self		assert: html		equals:			'<button id="button-id1" type="button">Ok</button><button id="button-id2" type="button">Cancel</button><script type="text/javascript">$("#button-id1").click(function(event){$(this).toggleClass("willow-loading")});$("#button-id2").click(function(event){$(this).toggleClass("willow-loading")});</script>'!

testTransformInto	| html interpreter container |	interpreter := CombinedWebInteractionInterpreter combiningInterpretersOf: self buttons.	container := IdentifiedWebView forDivNamed: 'search-results' containing: ''.	html := self		renderUsing: [ :canvas | 			interpreter transform: container into: 'Loading...'.			canvas				render: okButton;				render: cancelButton;				render: container ].	self		assert: html		equals:			'<button id="button-id2" type="button">Ok</button><button id="button-id3" type="button">Cancel</button><div id="search-results-id1"></div><script type="text/javascript">$("#button-id2").click(function(event){$("#search-results-id1").html("Loading...")});$("#button-id3").click(function(event){$("#search-results-id1").html("Loading...")});</script>'! !
!CombinedWebInteractionInterpreterTest categoriesFor: #buttons!initialization!public! !
!CombinedWebInteractionInterpreterTest categoriesFor: #setUp!initialization!public! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testAddCssClass!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testAddCssClassToComponentsMatching!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testChangeCssClassTo!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testCloseAllDialogs!public!tests/Configuring / Dialogs! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testCloseLastDialog!public!tests/Configuring / Dialogs! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testConfirmAsking!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testDetermineBehaviorByEvaluating!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testDetermineBehaviorByEvaluatingWith!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testDisable!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testDisableSpecificComponent!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testEnable!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testEvaluate!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testEvaluateWith!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testExecuteOnClient!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testFocus!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testFocusUsing!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testInform!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testInformSelection!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testOnlyWhenDetermineBehaviorByEvaluating!public!tests/Configuring! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testOpen!public!tests/Configuring / Dialogs! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testRemove!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testRemoveCssClassFromComponentsMatching!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testRemoveCssClassFromComponentsWithClass!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testRender!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testRenderAll!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testScrollingIntoView!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSerializeChildForm!public!tests/Configuring / Serialization! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSerializeContainerForm!public!tests/Configuring / Serialization! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSerializeForm!public!tests/Configuring / Serialization! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSerializeIt!public!tests/Configuring / Serialization! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSerializeWithHiddenInputs!public!tests/Configuring / Serialization! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSetValueToThenTriggerChangeOf!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSetValueToWithoutTriggeringChangeOnComponentWithId!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testShowLoadingNotificationStyledAsAll!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testShowWhileCallingServerToRender!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSubmitForm!public!tests/Configuring / Serialization! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testSubmitFormStyledAs!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testTemporarilyDisableAndTransformInto!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testTemporarilyDisableAndTransformSelfInto!public!tests/Configuring/DOM! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testToggleCssClass!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testToggleCssClassOn!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testToggleCssClassOnComponentsMatching!public!tests/Configuring / CSS! !
!CombinedWebInteractionInterpreterTest categoriesFor: #testTransformInto!public!tests/Configuring/DOM! !

