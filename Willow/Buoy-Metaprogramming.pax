| package |
package := Package name: 'Buoy-Metaprogramming'.
package paxVersion: 1;
	basicComment: 'Willow for Dolphin Smalltalk 7.1

Willow is a Web Interaction Library that eases the burden of creating AJAX-based web applications.

Willow and associated frameworks created by Buenos Aires Smalltalk
https://github.com/ba-st

Dolphin Smalltalk port by John Aspinall, May 2020.

Willow v13.0.0
Willow Bootstrap v12.0.0
Willow Spinkit v8.0.0
RenoirSt v7.0.0
Boardwalk v5.0.0
Buoy v5.0.0'.


package classNames
	add: #Interface;
	add: #KeywordMessageSendingCollector;
	add: #MessageSendingCollector;
	add: #Namespace;
	add: #UnaryMessageSendingCollector;
	yourself.

package methodNames
	add: #Behavior -> #allLeafSubclasses;
	add: #Object -> #isA:;
	add: #Object -> #isAn:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'Buoy-Assertions'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Portishead\Portishead-Core').

package setManualPrerequisites: #(
	'Portishead-Core').

package!

"Class Definitions"!

Object subclass: #Interface
	instanceVariableNames: 'name messages'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #MessageSendingCollector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #Namespace
	instanceVariableNames: 'bindings'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MessageSendingCollector subclass: #KeywordMessageSendingCollector
	instanceVariableNames: 'receiver filterBlock arguments'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MessageSendingCollector subclass: #UnaryMessageSendingCollector
	instanceVariableNames: 'receiver filterBlock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Behavior methodsFor!

allLeafSubclasses	| leafs |	leafs := OrderedCollection new.	self allSubclassesDo: [ :class | class subclasses ifEmpty: [ leafs add: class ] ].	^ leafs! !
!Behavior categoriesFor: #allLeafSubclasses!*Buoy/Metaprogramming!public! !

!Object methodsFor!

isA: aClass	^self isKindOf: aClass!

isAn: aClass	^self isA: aClass! !
!Object categoriesFor: #isA:!*Buoy/Metaprogramming!public! !
!Object categoriesFor: #isAn:!*Buoy/Metaprogramming!public! !

"End of package definition"!

